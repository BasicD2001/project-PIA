{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Chart, registerables } from 'chart.js';\nimport Dekorater from '../models/dekorater';\nexport let DekoraterStatistikaComponent = class DekoraterStatistikaComponent {\n  constructor(servis, ruter) {\n    this.servis = servis;\n    this.ruter = ruter;\n    this.jobsPerMonth = [10, 15, 5, 20, 12, 18, 9, 15, 10, 8, 14, 16];\n    this.dekorateriData = [{\n      dekorater: 'Dejan',\n      poslovi: 25\n    }, {\n      dekorater: 'Maja',\n      poslovi: 30\n    }, {\n      dekorater: 'Marko',\n      poslovi: 15\n    }, {\n      dekorater: 'Ana',\n      poslovi: 20\n    }];\n    this.averageJobsPerDay = [5, 8, 10, 7, 6, 4, 3]; // Primer podataka za dane u nedelji\n    this.dekorater = new Dekorater();\n  }\n  ngOnInit() {\n    let naziv = localStorage.getItem('ulogovan');\n    naziv = naziv == null ? '' : naziv;\n    this.servis.getDekorater(naziv).subscribe(d => {\n      this.dekorater = d;\n      if (naziv) {\n        this.servis.brojPoslovaPoMesecima(naziv).subscribe(b => {\n          this.jobsPerMonth = b;\n          this.servis.posloviMedjuDekoratorima(this.dekorater.firma).subscribe(p => {\n            this.dekorateriData = p;\n            this.servis.prosecnoPoDanima(this.dekorater.firma).subscribe(n => {\n              let prosecniBrojevi = n.map(broj => broj / 3);\n              this.averageJobsPerDay = prosecniBrojevi;\n              Chart.register(...registerables);\n              this.createBarChart();\n              this.createPieChart();\n              this.createHistogram();\n            });\n          });\n        });\n      }\n    });\n  }\n  createBarChart() {\n    const canvas = document.getElementById('myChart');\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n          datasets: [{\n            label: 'Broj poslova',\n            data: this.jobsPerMonth,\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error('Failed to get canvas context.');\n    }\n  }\n  createPieChart() {\n    const canvas = document.getElementById('myPieChart');\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: this.dekorateriData.map(item => item.dekorater),\n          datasets: [{\n            label: 'Raspodela poslova',\n            data: this.dekorateriData.map(item => item.poslovi),\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    } else {\n      console.error('Failed to get pie chart context.');\n    }\n  }\n  createHistogram() {\n    const canvas = document.getElementById('myHistogram');\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['PON', 'UTO', 'SRE', 'ČET', 'PET', 'SUB', 'NED'],\n          datasets: [{\n            label: 'Prosečan broj poslova po danu',\n            data: this.averageJobsPerDay,\n            backgroundColor: 'rgba(153, 102, 255, 0.2)',\n            borderColor: 'rgba(153, 102, 255, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error('Failed to get histogram context.');\n    }\n  }\n};\nDekoraterStatistikaComponent = __decorate([Component({\n  selector: 'app-dekorater-statistika',\n  templateUrl: './dekorater-statistika.component.html',\n  styleUrls: ['./dekorater-statistika.component.css']\n})], DekoraterStatistikaComponent);","map":{"version":3,"names":["Component","Chart","registerables","Dekorater","DekoraterStatistikaComponent","constructor","servis","ruter","jobsPerMonth","dekorateriData","dekorater","poslovi","averageJobsPerDay","ngOnInit","naziv","localStorage","getItem","getDekorater","subscribe","d","brojPoslovaPoMesecima","b","posloviMedjuDekoratorima","firma","p","prosecnoPoDanima","n","prosecniBrojevi","map","broj","register","createBarChart","createPieChart","createHistogram","canvas","document","getElementById","ctx","getContext","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","console","error","item","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\projekat-pia\\front\\app\\src\\app\\dekorater-statistika\\dekorater-statistika.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Chart, registerables } from 'chart.js';\nimport { UserService } from '../services/user.service';\nimport { Router } from '@angular/router';\nimport Dekorater from '../models/dekorater';\n\n@Component({\n  selector: 'app-dekorater-statistika',\n  templateUrl: './dekorater-statistika.component.html',\n  styleUrls: ['./dekorater-statistika.component.css']\n})\nexport class DekoraterStatistikaComponent implements OnInit {\n  public jobsPerMonth: number[] = [10, 15, 5, 20, 12, 18, 9, 15, 10, 8, 14, 16];\n  public dekorateriData: { dekorater: string; poslovi: number }[] = [\n    { dekorater: 'Dejan', poslovi: 25 },\n    { dekorater: 'Maja', poslovi: 30 },\n    { dekorater: 'Marko', poslovi: 15 },\n    { dekorater: 'Ana', poslovi: 20 }\n  ];\n  public averageJobsPerDay: number[] = [5, 8, 10, 7, 6, 4, 3]; // Primer podataka za dane u nedelji\n\n  constructor(private servis: UserService, private ruter: Router) { }\n\n  dekorater: Dekorater = new Dekorater()\n\n  ngOnInit(): void {\n\n    let naziv = localStorage.getItem('ulogovan')\n    naziv = naziv == null ? '' : naziv\n    this.servis.getDekorater(naziv).subscribe(\n      d => {\n        this.dekorater = d\n        if (naziv) {\n          this.servis.brojPoslovaPoMesecima(naziv).subscribe(\n            b => {\n              this.jobsPerMonth = b\n              this.servis.posloviMedjuDekoratorima(this.dekorater.firma).subscribe(\n                p => {\n                  this.dekorateriData = p\n                  this.servis.prosecnoPoDanima(this.dekorater.firma).subscribe(\n                    n => {\n                      let prosecniBrojevi = n.map(broj => broj / 3);\n                      this.averageJobsPerDay = prosecniBrojevi\n                      Chart.register(...registerables);\n                      this.createBarChart();\n                      this.createPieChart();\n                      this.createHistogram();\n                    }\n                  )\n                }\n              )\n            }\n          )\n        }\n\n      }\n    )\n\n\n  }\n\n  createBarChart() {\n    const canvas = document.getElementById('myChart') as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: [\n            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n            'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n          ],\n          datasets: [{\n            label: 'Broj poslova',\n            data: this.jobsPerMonth,\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error('Failed to get canvas context.');\n    }\n  }\n\n  createPieChart() {\n    const canvas = document.getElementById('myPieChart') as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: this.dekorateriData.map(item => item.dekorater),\n          datasets: [{\n            label: 'Raspodela poslova',\n            data: this.dekorateriData.map(item => item.poslovi),\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 206, 86, 0.2)',\n              'rgba(75, 192, 192, 0.2)',\n            ],\n            borderColor: [\n              'rgba(255, 99, 132, 1)',\n              'rgba(54, 162, 235, 1)',\n              'rgba(255, 206, 86, 1)',\n              'rgba(75, 192, 192, 1)',\n            ],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    } else {\n      console.error('Failed to get pie chart context.');\n    }\n  }\n\n  createHistogram() {\n    const canvas = document.getElementById('myHistogram') as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['PON', 'UTO', 'SRE', 'ČET', 'PET', 'SUB', 'NED'],\n          datasets: [{\n            label: 'Prosečan broj poslova po danu',\n            data: this.averageJobsPerDay,\n            backgroundColor: 'rgba(153, 102, 255, 0.2)',\n            borderColor: 'rgba(153, 102, 255, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error('Failed to get histogram context.');\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}