{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/user.service\";\nimport * as i3 from \"@angular/forms\";\nexport class FirmaComponent {\n  constructor(router, servis) {\n    this.router = router;\n    this.servis = servis;\n    this.adresa = '';\n  }\n  ngOnInit() {\n    // Inicijalizujte mapu\n    this.initMap();\n  }\n  initMap() {\n    // Inicijalizacija Google mape\n    const mapOptions = {\n      center: {\n        lat: 51.673858,\n        lng: 7.815982\n      },\n      zoom: 13\n    };\n    this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\n  }\n  onSubmit() {\n    if (this.adresa) {\n      this.geocodeAddress(this.adresa);\n    }\n  }\n  geocodeAddress(address) {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode({\n      address\n    }, (results, status) => {\n      if (status === 'OK' && results && results.length > 0 && this.map) {\n        const firstResult = results[0];\n        if (firstResult && firstResult.geometry && firstResult.geometry.location) {\n          const location = firstResult.geometry.location;\n          // Ako marker već postoji, uklanjamo ga\n          if (this.marker) {\n            this.marker.setMap(null);\n          }\n          // Postavljamo novu lokaciju na mapu i dodajemo marker\n          this.map.setCenter(location);\n          this.map.setZoom(15);\n          this.marker = new google.maps.Marker({\n            position: location,\n            map: this.map\n          });\n        } else {\n          console.error('Geocode result is missing geometry or location.');\n        }\n      } else {\n        console.error('Geocode was not successful for the following reason: ' + status);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function FirmaComponent_Factory(t) {\n    return new (t || FirmaComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FirmaComponent,\n    selectors: [[\"app-firma\"]],\n    decls: 6,\n    vars: 1,\n    consts: [[\"type\", \"text\", \"placeholder\", \"Unesite adresu\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function FirmaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\")(1, \"tr\")(2, \"td\");\n        i0.ɵɵtext(3, \"Adresa:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"td\")(5, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function FirmaComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.adresa = $event;\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.adresa);\n      }\n    },\n    dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FirmaComponent","constructor","router","servis","adresa","ngOnInit","initMap","mapOptions","center","lat","lng","zoom","map","google","maps","Map","document","getElementById","onSubmit","geocodeAddress","address","geocoder","Geocoder","geocode","results","status","length","firstResult","geometry","location","marker","setMap","setCenter","setZoom","Marker","position","console","error","_","i0","ɵɵdirectiveInject","i1","Router","i2","UserService","_2","selectors","decls","vars","consts","template","FirmaComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","FirmaComponent_Template_input_ngModelChange_5_listener","$event","ɵɵadvance","ɵɵproperty"],"sources":["D:\\projekat-pia\\front\\app\\src\\app\\firma\\firma.component.ts","D:\\projekat-pia\\front\\app\\src\\app\\firma\\firma.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-firma',\n  templateUrl: './firma.component.html',\n  styleUrls: ['./firma.component.css']\n})\nexport class FirmaComponent implements OnInit {\n  adresa: string = '';\n  lat: number | undefined;\n  lng: number | undefined;\n  map: google.maps.Map | undefined;\n  marker: google.maps.Marker | undefined;\n\n  constructor(private router: Router, private servis: UserService) {}\n\n  ngOnInit(): void {\n    // Inicijalizujte mapu\n    this.initMap();\n  }\n\n  initMap(): void {\n    // Inicijalizacija Google mape\n    const mapOptions: google.maps.MapOptions = {\n      center: { lat: 51.673858, lng: 7.815982 }, // Početna pozicija mape\n      zoom: 13\n    };\n    this.map = new google.maps.Map(document.getElementById('map') as HTMLElement, mapOptions);\n  }\n\n  onSubmit(): void {\n    if (this.adresa) {\n      this.geocodeAddress(this.adresa);\n    }\n  }\n\n  geocodeAddress(address: string): void {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode({ address }, (results, status) => {\n      if (status === 'OK' && results && results.length > 0 && this.map) {\n        const firstResult = results[0];\n        if (firstResult && firstResult.geometry && firstResult.geometry.location) {\n          const location = firstResult.geometry.location;\n          // Ako marker već postoji, uklanjamo ga\n          if (this.marker) {\n            this.marker.setMap(null);\n          }\n          // Postavljamo novu lokaciju na mapu i dodajemo marker\n          this.map.setCenter(location);\n          this.map.setZoom(15);\n          this.marker = new google.maps.Marker({\n            position: location,\n            map: this.map\n          });\n        } else {\n          console.error('Geocode result is missing geometry or location.');\n        }\n      } else {\n        console.error('Geocode was not successful for the following reason: ' + status);\n      }\n    });\n  }\n}\n","<table>\n    <tr>\n        <td>Adresa:</td>\n        <td>\n            <input type=\"text\" [(ngModel)]=\"adresa\" placeholder=\"Unesite adresu\">\n        </td>\n    </tr>\n</table>\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}