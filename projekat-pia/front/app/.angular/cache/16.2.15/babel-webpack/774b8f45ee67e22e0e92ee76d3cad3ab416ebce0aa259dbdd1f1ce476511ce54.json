{"ast":null,"code":"import * as L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/user.service\";\nimport * as i3 from \"@angular/forms\";\nexport class FirmaComponent {\n  constructor(ruter, servis) {\n    this.ruter = ruter;\n    this.servis = servis;\n    this.adresa = '';\n  }\n  ngOnInit() {\n    this.inicijalizujMapu();\n  }\n  inicijalizujMapu() {\n    this.map = L.map('map').setView([51.673858, 7.815982], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 18,\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  prikaziNaMapi() {\n    if (this.map && this.adresa) {\n      this.geokodirajAdresu(this.adresa);\n    }\n  }\n  geokodirajAdresu(adresa) {\n    const geocodingUrl = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(adresa)}&format=json&limit=1`;\n    fetch(geocodingUrl).then(response => response.json()).then(data => {\n      if (data.length > 0) {\n        const {\n          lat,\n          lon\n        } = data[0];\n        this.lat = parseFloat(lat);\n        this.lng = parseFloat(lon);\n        if (this.lat && this.lng && this.map) {\n          this.map.setView([this.lat, this.lng], 13);\n          L.marker([this.lat, this.lng]).addTo(this.map).bindPopup(adresa).openPopup();\n        }\n      } else {\n        alert('Adresa nije pronađena.');\n      }\n    }).catch(error => {\n      console.error('Greška prilikom geokodiranja:', error);\n      alert('Greška prilikom geokodiranja.');\n    });\n  }\n  static #_ = this.ɵfac = function FirmaComponent_Factory(t) {\n    return new (t || FirmaComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FirmaComponent,\n    selectors: [[\"app-firma\"]],\n    decls: 6,\n    vars: 1,\n    consts: [[\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"]],\n    template: function FirmaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\")(1, \"tr\")(2, \"td\");\n        i0.ɵɵtext(3, \" Adresa: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"td\")(5, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function FirmaComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.adresa = $event;\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.adresa);\n      }\n    },\n    dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["L","FirmaComponent","constructor","ruter","servis","adresa","ngOnInit","inicijalizujMapu","map","setView","tileLayer","maxZoom","attribution","addTo","prikaziNaMapi","geokodirajAdresu","geocodingUrl","encodeURIComponent","fetch","then","response","json","data","length","lat","lon","parseFloat","lng","marker","bindPopup","openPopup","alert","catch","error","console","_","i0","ɵɵdirectiveInject","i1","Router","i2","UserService","_2","selectors","decls","vars","consts","template","FirmaComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","FirmaComponent_Template_input_ngModelChange_5_listener","$event","ɵɵadvance","ɵɵproperty"],"sources":["D:\\projekat-pia\\front\\app\\src\\app\\firma\\firma.component.ts","D:\\projekat-pia\\front\\app\\src\\app\\firma\\firma.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../services/user.service';\nimport * as L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n@Component({\n  selector: 'app-firma',\n  templateUrl: './firma.component.html',\n  styleUrls: ['./firma.component.css']\n})\nexport class FirmaComponent implements OnInit {\n  map: L.Map | undefined;\n  adresa: string = '';\n  lat: number | undefined;\n  lng: number | undefined;\n\n  constructor(private ruter: Router, private servis: UserService) {}\n\n  ngOnInit(): void {\n    this.inicijalizujMapu();\n  }\n\n  inicijalizujMapu(): void {\n    this.map = L.map('map').setView([51.673858, 7.815982], 13);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 18,\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n\n  prikaziNaMapi(): void {\n    if (this.map && this.adresa) {\n      this.geokodirajAdresu(this.adresa);\n    }\n  }\n\n  geokodirajAdresu(adresa: string): void {\n    const geocodingUrl = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(adresa)}&format=json&limit=1`;\n\n    fetch(geocodingUrl)\n      .then(response => response.json())\n      .then(data => {\n        if (data.length > 0) {\n          const { lat, lon } = data[0];\n          this.lat = parseFloat(lat);\n          this.lng = parseFloat(lon);\n\n          if (this.lat && this.lng && this.map) {\n            this.map.setView([this.lat, this.lng], 13);\n            L.marker([this.lat, this.lng]).addTo(this.map)\n              .bindPopup(adresa)\n              .openPopup();\n          }\n        } else {\n          alert('Adresa nije pronađena.');\n        }\n      })\n      .catch(error => {\n        console.error('Greška prilikom geokodiranja:', error);\n        alert('Greška prilikom geokodiranja.');\n      });\n  }\n}\n","\n<table>\n    <tr>\n        <td>\n            Adresa:\n        </td>\n        <td>\n            <input type=\"text\" [(ngModel)]=\"adresa\">\n        </td>\n    </tr>\n</table>\n\n\n\n"],"mappings":"AAGA,OAAO,KAAKA,CAAC,MAAM,SAAS;AAC5B,OAAO,0BAA0B;;;;;AAOjC,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,KAAa,EAAUC,MAAmB;IAA1C,KAAAD,KAAK,GAALA,KAAK;IAAkB,KAAAC,MAAM,GAANA,MAAM;IAJjD,KAAAC,MAAM,GAAW,EAAE;EAI8C;EAEjEC,QAAQA,CAAA;IACN,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAEAA,gBAAgBA,CAAA;IACd,IAAI,CAACC,GAAG,GAAGR,CAAC,CAACQ,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC;IAE1DT,CAAC,CAACU,SAAS,CAAC,oDAAoD,EAAE;MAChEC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE;KACd,CAAC,CAACC,KAAK,CAAC,IAAI,CAACL,GAAG,CAAC;EACpB;EAEAM,aAAaA,CAAA;IACX,IAAI,IAAI,CAACN,GAAG,IAAI,IAAI,CAACH,MAAM,EAAE;MAC3B,IAAI,CAACU,gBAAgB,CAAC,IAAI,CAACV,MAAM,CAAC;;EAEtC;EAEAU,gBAAgBA,CAACV,MAAc;IAC7B,MAAMW,YAAY,GAAG,gDAAgDC,kBAAkB,CAACZ,MAAM,CAAC,sBAAsB;IAErHa,KAAK,CAACF,YAAY,CAAC,CAChBG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAG;MACX,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACnB,MAAM;UAAEC,GAAG;UAAEC;QAAG,CAAE,GAAGH,IAAI,CAAC,CAAC,CAAC;QAC5B,IAAI,CAACE,GAAG,GAAGE,UAAU,CAACF,GAAG,CAAC;QAC1B,IAAI,CAACG,GAAG,GAAGD,UAAU,CAACD,GAAG,CAAC;QAE1B,IAAI,IAAI,CAACD,GAAG,IAAI,IAAI,CAACG,GAAG,IAAI,IAAI,CAACnB,GAAG,EAAE;UACpC,IAAI,CAACA,GAAG,CAACC,OAAO,CAAC,CAAC,IAAI,CAACe,GAAG,EAAE,IAAI,CAACG,GAAG,CAAC,EAAE,EAAE,CAAC;UAC1C3B,CAAC,CAAC4B,MAAM,CAAC,CAAC,IAAI,CAACJ,GAAG,EAAE,IAAI,CAACG,GAAG,CAAC,CAAC,CAACd,KAAK,CAAC,IAAI,CAACL,GAAG,CAAC,CAC3CqB,SAAS,CAACxB,MAAM,CAAC,CACjByB,SAAS,EAAE;;OAEjB,MAAM;QACLC,KAAK,CAAC,wBAAwB,CAAC;;IAEnC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAG;MACbC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDF,KAAK,CAAC,+BAA+B,CAAC;IACxC,CAAC,CAAC;EACN;EAAC,QAAAI,CAAA,G;qBApDUlC,cAAc,EAAAmC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAdzC,cAAc;IAAA0C,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCV3Bb,EAAA,CAAAe,cAAA,YAAO;QAGKf,EAAA,CAAAgB,MAAA,gBACJ;QAAAhB,EAAA,CAAAiB,YAAA,EAAK;QACLjB,EAAA,CAAAe,cAAA,SAAI;QACmBf,EAAA,CAAAkB,UAAA,2BAAAC,uDAAAC,MAAA;UAAA,OAAAN,GAAA,CAAA7C,MAAA,GAAAmD,MAAA;QAAA,EAAoB;QAAvCpB,EAAA,CAAAiB,YAAA,EAAwC;;;QAArBjB,EAAA,CAAAqB,SAAA,GAAoB;QAApBrB,EAAA,CAAAsB,UAAA,YAAAR,GAAA,CAAA7C,MAAA,CAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}