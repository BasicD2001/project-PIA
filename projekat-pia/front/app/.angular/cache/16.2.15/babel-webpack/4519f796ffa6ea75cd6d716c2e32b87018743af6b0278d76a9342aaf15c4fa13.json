{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nimport * as i2 from \"@angular/router\";\nexport class DekoraterStatistikaComponent {\n  constructor(servis, ruter) {\n    this.servis = servis;\n    this.ruter = ruter;\n    this.jobsPerMonth = [10, 15, 5, 20, 12, 18, 9, 15, 10, 8, 14, 16];\n    this.dekorateriData = [{\n      dekorater: 'Dejan',\n      poslovi: 25\n    }, {\n      dekorater: 'Maja',\n      poslovi: 30\n    }, {\n      dekorater: 'Marko',\n      poslovi: 15\n    }, {\n      dekorater: 'Ana',\n      poslovi: 20\n    }];\n    this.averageJobsPerDay = [5, 8, 10, 7, 6, 4, 3]; // Primer podataka za dane u nedelji\n  }\n\n  ngOnInit() {\n    let naziv = localStorage.getItem('ulogovan');\n    naziv = naziv == null ? '' : naziv;\n    Chart.register(...registerables);\n    this.createBarChart();\n    this.createPieChart();\n    this.createHistogram();\n  }\n  createBarChart() {\n    const canvas = document.getElementById('myChart');\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n          datasets: [{\n            label: 'Broj poslova',\n            data: this.jobsPerMonth,\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error('Failed to get canvas context.');\n    }\n  }\n  createPieChart() {\n    const canvas = document.getElementById('myPieChart');\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: this.dekorateriData.map(item => item.dekorater),\n          datasets: [{\n            label: 'Raspodela poslova',\n            data: this.dekorateriData.map(item => item.poslovi),\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    } else {\n      console.error('Failed to get pie chart context.');\n    }\n  }\n  createHistogram() {\n    const canvas = document.getElementById('myHistogram');\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['PON', 'UTO', 'SRE', 'ČET', 'PET', 'SUB', 'NED'],\n          datasets: [{\n            label: 'Prosečan broj poslova po danu',\n            data: this.averageJobsPerDay,\n            backgroundColor: 'rgba(153, 102, 255, 0.2)',\n            borderColor: 'rgba(153, 102, 255, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error('Failed to get histogram context.');\n    }\n  }\n  static #_ = this.ɵfac = function DekoraterStatistikaComponent_Factory(t) {\n    return new (t || DekoraterStatistikaComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DekoraterStatistikaComponent,\n    selectors: [[\"app-dekorater-statistika\"]],\n    decls: 12,\n    vars: 0,\n    consts: [[\"id\", \"myChart\", \"width\", \"300\", \"height\", \"150\"], [\"id\", \"myPieChart\", \"width\", \"300\", \"height\", \"150\"], [\"id\", \"myHistogram\", \"width\", \"300\", \"height\", \"150\"]],\n    template: function DekoraterStatistikaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n        i0.ɵɵtext(2, \"Broj poslova po mesecima\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"canvas\", 0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\")(5, \"h2\");\n        i0.ɵɵtext(6, \"Raspodela poslova me\\u0111u dekoraterima\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\")(9, \"h2\");\n        i0.ɵɵtext(10, \"Prose\\u010Dan broj poslova po danima\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"canvas\", 2);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"canvas[_ngcontent-%COMP%] {\\n    max-width: 500px;\\n    height: auto;\\n  }\\n\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZGVrb3JhdGVyLXN0YXRpc3Rpa2EvZGVrb3JhdGVyLXN0YXRpc3Rpa2EuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixZQUFZO0VBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyJjYW52YXMge1xyXG4gICAgbWF4LXdpZHRoOiA1MDBweDtcclxuICAgIGhlaWdodDogYXV0bztcclxuICB9XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["Chart","registerables","DekoraterStatistikaComponent","constructor","servis","ruter","jobsPerMonth","dekorateriData","dekorater","poslovi","averageJobsPerDay","ngOnInit","naziv","localStorage","getItem","register","createBarChart","createPieChart","createHistogram","canvas","document","getElementById","ctx","getContext","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","console","error","map","item","_","i0","ɵɵdirectiveInject","i1","UserService","i2","Router","_2","selectors","decls","vars","consts","template","DekoraterStatistikaComponent_Template","rf","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement"],"sources":["D:\\projekat-pia\\front\\app\\src\\app\\dekorater-statistika\\dekorater-statistika.component.ts","D:\\projekat-pia\\front\\app\\src\\app\\dekorater-statistika\\dekorater-statistika.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Chart, registerables } from 'chart.js';\nimport { UserService } from '../services/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-dekorater-statistika',\n  templateUrl: './dekorater-statistika.component.html',\n  styleUrls: ['./dekorater-statistika.component.css']\n})\nexport class DekoraterStatistikaComponent implements OnInit {\n  public jobsPerMonth: number[] = [10, 15, 5, 20, 12, 18, 9, 15, 10, 8, 14, 16];\n  public dekorateriData: { dekorater: string; poslovi: number }[] = [\n    { dekorater: 'Dejan', poslovi: 25 },\n    { dekorater: 'Maja', poslovi: 30 },\n    { dekorater: 'Marko', poslovi: 15 },\n    { dekorater: 'Ana', poslovi: 20 }\n  ];\n  public averageJobsPerDay: number[] = [5, 8, 10, 7, 6, 4, 3]; // Primer podataka za dane u nedelji\n\n  constructor(private servis: UserService, private ruter: Router) {}\n\n  ngOnInit(): void {\n\n    let naziv=localStorage.getItem('ulogovan')\n    naziv=naziv==null?'':naziv\n    Chart.register(...registerables);\n    this.createBarChart();\n    this.createPieChart();\n    this.createHistogram();\n  }\n\n  createBarChart() {\n    const canvas = document.getElementById('myChart') as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: [\n            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n            'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n          ],\n          datasets: [{\n            label: 'Broj poslova',\n            data: this.jobsPerMonth,\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error('Failed to get canvas context.');\n    }\n  }\n\n  createPieChart() {\n    const canvas = document.getElementById('myPieChart') as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: this.dekorateriData.map(item => item.dekorater),\n          datasets: [{\n            label: 'Raspodela poslova',\n            data: this.dekorateriData.map(item => item.poslovi),\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 206, 86, 0.2)',\n              'rgba(75, 192, 192, 0.2)',\n            ],\n            borderColor: [\n              'rgba(255, 99, 132, 1)',\n              'rgba(54, 162, 235, 1)',\n              'rgba(255, 206, 86, 1)',\n              'rgba(75, 192, 192, 1)',\n            ],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    } else {\n      console.error('Failed to get pie chart context.');\n    }\n  }\n\n  createHistogram() {\n    const canvas = document.getElementById('myHistogram') as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['PON', 'UTO', 'SRE', 'ČET', 'PET', 'SUB', 'NED'],\n          datasets: [{\n            label: 'Prosečan broj poslova po danu',\n            data: this.averageJobsPerDay,\n            backgroundColor: 'rgba(153, 102, 255, 0.2)',\n            borderColor: 'rgba(153, 102, 255, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error('Failed to get histogram context.');\n    }\n  }\n}\n","<div>\n    <h2>Broj poslova po mesecima</h2>\n    <canvas id=\"myChart\" width=\"300\" height=\"150\"></canvas> <!-- Smanjeno -->\n  </div>\n  <div>\n    <h2>Raspodela poslova među dekoraterima</h2>\n    <canvas id=\"myPieChart\" width=\"300\" height=\"150\"></canvas> <!-- Smanjeno -->\n  </div>\n  <div>\n    <h2>Prosečan broj poslova po danima</h2>\n    <canvas id=\"myHistogram\" width=\"300\" height=\"150\"></canvas> <!-- Smanjeno -->\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}